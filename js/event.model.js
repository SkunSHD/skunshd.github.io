(function(window) {	'use strict';		/**	* @description	*  This class doing all that concerns a single event.	*/	function Model(options) {		// this.storage, this.event, this.date, this.names, this.description;				for (var key in options) {			if (key == 'storage') this.storage = options[key];			if (key == 'event') this.event = options.event;			if (key == 'date') this.date = new Date(options.date);			if (key == 'names') this.names = options.names;			if (key == 'description') this.description = options.description;		}	}		Model.prototype.save = function (eventObj) {		var lsId = this.makeMonthId(eventObj);				var jsonObj = '';		var oldMonthArr = this.storage.getData(lsId);				if (oldMonthArr) {			oldMonthArr = JSON.parse(oldMonthArr);			oldMonthArr[eventObj.date.getDate()-1] = eventObj;						jsonObj = JSON.stringify(oldMonthArr);		} else {			var daysInMonth = this.monthCapacity(eventObj);			var newMonthArr = new Array(daysInMonth);			newMonthArr[eventObj.date.getDate()-1] = eventObj;			jsonObj = JSON.stringify(newMonthArr);		}				this.storage.setData(lsId, jsonObj);	};		Model.prototype.makeMonthId = function (eventObj) {			var lsId = new Date(eventObj.date);			lsId.setDate(1);			lsId.setHours(0, 0, 0, 0);			lsId = lsId.getTime();			return lsId;	};	Model.prototype.monthCapacity = function (dateObj) {		var dateObj = dateObj || new Date();		var result = new Date(dateObj.date.getFullYear(), dateObj.date.getMonth() + 1, 0);		return result.getDate();	};		Model.prototype.getTplObj = function () {		var tplObj = {};		if (this.date) tplObj.date = this.date.getDate();		if (this.event) tplObj.event = this.event;		if (this.names) tplObj.names = this.names;		if (this.description) tplObj.description = this.description;		return tplObj;	}    Model.prototype.validate = function (attrs) {        //validate properties    };		Model.prototype.getbyKey = function (millisec) {		// create date obj		// take corresponding event from ls and return	};		Model.prototype.remove = function (key) {		this.storage.deleteByKey(key);	};		Model.prototype.deleteAll = function () {		this.storage.deleteAll();	};		window.app = window.app || {};	window.app.Model = Model;	})(window);